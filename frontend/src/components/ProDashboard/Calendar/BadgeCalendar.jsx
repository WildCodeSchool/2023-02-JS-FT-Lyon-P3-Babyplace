import PropTypes from "prop-types";
import * as React from "react";
import Badge from "@mui/material/Badge";
import { PickersDay } from "@mui/x-date-pickers/PickersDay";

// üî¥ üü¢  üü†

// D√©finition du composant BadgeCalendar
export default function BadgeCalendar(props) {
  // D√©structuration des props pour obtenir les valeurs de freeDays, busyDays, fullDays, day et outsideCurrentMonth
  const { freeDays, busyDays, fullDays, day, outsideCurrentMonth, ...other } =
    props;

  // V√©rifier si la date courante est un jour libre (free), un jour occup√© (busy), ou un jour complet (full)
  const free = !outsideCurrentMonth && freeDays.indexOf(day.date()) >= 0;
  const busy = !outsideCurrentMonth && busyDays.indexOf(day.date()) >= 0;
  const full = !outsideCurrentMonth && fullDays.indexOf(day.date()) >= 0;

  // D√©termination du contenu du badge en fonction du statut du jour (free, busy, full)
  let badgeContent;
  if (free) {
    badgeContent = "üü¢"; // Emoji vert pour les jours libres
  } else if (busy) {
    badgeContent = "üü†"; // Emoji orange pour les jours occup√©s
  } else if (full) {
    badgeContent = "üî¥"; // Emoji rouge pour les jours complets
  }

  // Rendu du composant Badge avec le contenu appropri√©
  return (
    <Badge key={day.toString()} overlap="circular" badgeContent={badgeContent}>
      {/* Rendu du composant PickersDay avec les props restantes et les props sp√©cifiques */}
      <PickersDay
        // eslint-disable-next-line react/jsx-props-no-spreading
        {...other} // Props restantes pass√©es via le spread operator
        outsideCurrentMonth={outsideCurrentMonth} // Prop sp√©cifique pour indiquer si le jour est en dehors du mois courant
        day={day} // Prop sp√©cifique contenant l'objet repr√©sentant la date du jour
      />
    </Badge>
  );
}

// D√©finition des prop types pour le composant BadgeCalendar
BadgeCalendar.propTypes = {
  freeDays: PropTypes.arrayOf(PropTypes.number), // Liste des jours libres (tableau de nombres)
  busyDays: PropTypes.arrayOf(PropTypes.number), // Liste des jours occup√©s (tableau de nombres)
  fullDays: PropTypes.arrayOf(PropTypes.number), // Liste des jours complets (tableau de nombres)
  day: PropTypes.shape, // Objet repr√©sentant la date du jour
  outsideCurrentMonth: PropTypes.bool, // Indicateur si le jour est en dehors du mois courant (bool√©en)
};

// D√©finition des valeurs par d√©faut pour les props du composant BadgeCalendar
BadgeCalendar.defaultProps = {
  freeDays: null, // Par d√©faut, pas de jours libres sp√©cifi√©s
  busyDays: null, // Par d√©faut, pas de jours occup√©s sp√©cifi√©s
  fullDays: null, // Par d√©faut, pas de jours complets sp√©cifi√©s
  day: null, // Par d√©faut, pas de date sp√©cifi√©e
  outsideCurrentMonth: null, // Par d√©faut, pas de statut pour le mois courant sp√©cifi√©
};
